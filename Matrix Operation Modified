10-10-2023

Matrix Operation Scene Controller.java File
-----------------------------------------------
package mainpkg;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;

/**
 * FXML Controller class
 *
 * @author User
 */
public class MatrixOperationSceneController implements Initializable {

    @FXML    private TextField noOfRowsOfMatrix1TextField;
    @FXML    private TextField noOfColsOfMatrix1TextField;
    @FXML    private TextField noOfRowsOfMatrix2TextField;
    @FXML    private TextField noOfColsOfMatrix2TextField;
    @FXML    private TextField matrix1ElementTextField;
    @FXML    private TextField matrix2UpperBoundTextField;
    @FXML    private Label outputLabel;
    @FXML    private Label elementIndexLabel;
    @FXML    private ComboBox<String> operationComboBox;
    @FXML    private RadioButton matrix1RadioButton;
    @FXML    private RadioButton matrix2RadioButton;
    
    ToggleGroup tg, tg2;
    
    Matrix m1=null,m2=null,m3=null;
    int currentRowIndex=-1, currentColIndex=-1;
    int[][] temp ;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        
        outputLabel.setText("Generate Matrix & Select an Operation...");            
        operationComboBox.getItems().add("Matrix Addition");
        operationComboBox.getItems().addAll(
                                "Matrix Subtraction",
                                "Matrix Multiplication",
                                "Transpose a Matrix",
                                "Inverse a Matrix",
                                "Determinant of a Matrix"
                                    );
        matrix1RadioButton.setDisable(true);
        matrix2RadioButton.setDisable(true);
        tg = new ToggleGroup();
        matrix1RadioButton.setToggleGroup(tg);
        matrix2RadioButton.setToggleGroup(tg);
        
    }    


    
    @FXML
    private void addElementToMatrix1ButtonOnClicked(ActionEvent event) {
        int rows, cols;
        rows = Integer.parseInt(noOfRowsOfMatrix1TextField.getText());
        cols = Integer.parseInt(noOfColsOfMatrix1TextField.getText());
        
        if(currentRowIndex==-1 && currentColIndex==-1){
            m1 = new Matrix(rows,cols);
            currentRowIndex = currentColIndex = 0;
        }

        m1.vals[currentRowIndex][currentColIndex]
            = Integer.parseInt(matrix1ElementTextField.getText());
        matrix1ElementTextField.clear();
        if(currentColIndex < cols-1){       //4 X 5
             currentColIndex++;
        }
        else{
            if(currentRowIndex < rows-1){
                currentRowIndex++;
                currentColIndex=0;
            }
            else{
                Alert a = new Alert(AlertType.WARNING);
                a.setContentText("Oops! Matrix overflow.\n"
                    + "Could not add the element...");
                a.showAndWait();
            }
        }
        elementIndexLabel.setText(
                "Enter[" + currentRowIndex + "][" + currentColIndex + "]:"
            );
    }

    @FXML
    private void generateMatrix2ButtonOnClicked(ActionEvent event) {
    
        m2 = new Matrix(
            Integer.parseInt(noOfRowsOfMatrix2TextField.getText()),
            Integer.parseInt(noOfColsOfMatrix2TextField.getText()),
            Integer.parseInt(matrix2UpperBoundTextField.getText())
                
        );
    
    }

    @FXML
    private void executeOperationAndShowButtonOnClicked(ActionEvent event) {
        if(operationComboBox.getValue().equals("Matrix Addition"))
            addMatricesAndShow();
        else if(operationComboBox.getValue().equals("Matrix Subtraction"))
            subtractMatricesAndShow();
        else if(operationComboBox.getValue().equals("Matrix Multiplication"))
            multiplyMatricesAndShow();
        else if(operationComboBox.getValue().equals("Transpose a Matrix"))
            transposeMatrixAndShow();
        else if(operationComboBox.getValue().equals("Inverse  a Matrix"))
            inverseMatrixAndShow();
        else if(operationComboBox.getValue().equals("Determinant of a Matrix"))
            findDeterminantOfAMatrixAndShow();
        
    }

    @FXML
    private void operationComboBoxOnItemSelected(ActionEvent event) {
        if(
            operationComboBox.getValue().equals("Transpose a Matrix")
                ||
            operationComboBox.getValue().equals("Inverse a Matrix")   
                ||
            operationComboBox.getValue().equals("Determinant of a Matrix")    
        ){
            matrix1RadioButton.setDisable(false);
            matrix2RadioButton.setDisable(false);
        }
        else{
            matrix1RadioButton.setDisable(true);
            matrix2RadioButton.setDisable(true);
            matrix1RadioButton.setSelected(false);
            matrix2RadioButton.setSelected(false);
        }
    }

    private void addMatricesAndShow() {
        if(m1==null || m2==null){
            Alert a = new Alert(AlertType.ERROR);
            a.setContentText("Oops! One or Both matrices is/are not generated.\n"
                    + "Can't perform Matrix Addition...");
            a.showAndWait();
            return;        
        }
        m3 = m1.addMatrices(m2);
        String str="";
        if(m3 == null){
            str = "Oops! Dimension mismatch!\n Matrix operation aborted.";
        }
        else{
            str =  "Matrix-1\n"
                + m1.toString()
                + "\nMatrix-2\n"
                + m2.getStringEquivalentOfMatrix()
                + "\n\nAdded Matrix\n"
                + m3.toString();
        }
        outputLabel.setText(str);
    }

    private void subtractMatricesAndShow(){
        if(m1==null || m2==null){
            Alert a = new Alert(AlertType.ERROR);
            a.setContentText("Oops! One or Both matrices is/are not generated.\n"
                    + "Can't perform Matrix Addition...");
            a.showAndWait();
            return;        
        }
        m3 = m1.addMatrices(m2);
        String str="";
        if(m3 == null){
            str = "Oops! Dimension mismatch!\n Matrix operation aborted.";
        }
        else{
            str =  "Matrix-1\n"
                + m1.toString()
                + "\nMatrix-2\n"
                + m2.getStringEquivalentOfMatrix()
                + "\n\nAdded Matrix\n"
                + m3.toString();
        }
        outputLabel.setText(str);
    }
    private void multiplyMatricesAndShow(){
        //to do
    }
    private void transposeMatrixAndShow(){
        if(matrix1RadioButton.isSelected() && m1!=null){
            int[][] tempArr = new int[m1.vals[0].length][m1.vals.length];
            int i,j;
            
            for(i=0;i<tempArr.length;i++){
                for(j=0;j<tempArr[i].length;j++){
                    tempArr[i][j] = m1.vals[j][i];
                }
            }
            String str =  "Matrix-1 Before Transpose\n"
                + m1.toString();
            outputLabel.setText(str);
            m1.vals = tempArr;
            str = "\nMatrix-1 After Transpose\n"
                +  m1.toString();
            outputLabel.setText(str);
        }
        else if (matrix2RadioButton.isSelected() && m2!=null){
            int[][] tempArr = new int[m2.vals[0].length][m2.vals.length];
            int i,j;
            
            for(i=0;i<tempArr.length;i++){
                for(j=0;j<tempArr[i].length;j++){
                    tempArr[i][j] = m2.vals[j][i];
                }
            }
            String str =  "Matrix-2 Before Transpose\n"
                + m2.toString();
            outputLabel.setText(str);
            m2.vals = tempArr;
            str = "\nMatrix-2 After Transpose\n"
                +  m2.toString();
            outputLabel.setText(str);            
        }
        
    }
    private void inverseMatrixAndShow(){
        int x=10;
        int k = 0;
        //int i,j;
        for(int i=0;i<10;i++){
            System.out.println("x="+x);
            System.out.println("i="+i);
            
            {
                k=30;
                System.out.println("k="+k);
            }
            System.out.println("k="+k);
        }
        System.out.println("x="+x);
        System.out.println("k="+k);
        //System.out.println("i="+i);
    }
    private void findDeterminantOfAMatrixAndShow(){
        //to do
    }   

    @FXML
    private void resetMatricesButtonOnClicked(ActionEvent event) {
        m1=m2=m3=null;
        outputLabel.setText("");
    }
}
----------------------------------------------------------------------------------


Matrix Operation Scene.FXML
--------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.RadioButton?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.shape.Line?>
<?import javafx.scene.text.Font?>

<AnchorPane id="AnchorPane" prefHeight="702.0" prefWidth="600.0" style="-fx-background-color: #ffffff;" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="mainpkg.MatrixOperationSceneController">
   <children>
      <TextField fx:id="noOfRowsOfMatrix1TextField" layoutX="34.0" layoutY="32.0" prefHeight="25.0" prefWidth="184.0" promptText="No of rows for Matrix-1?" style="-fx-background-color: #9EDDFF; -fx-alignment: center;" />
      <TextField fx:id="noOfColsOfMatrix1TextField" layoutX="34.0" layoutY="64.0" prefHeight="25.0" prefWidth="184.0" promptText="No of colss for Matrix-1?" style="-fx-background-color: #9EDDFF; -fx-alignment: center;" />
      <TextField fx:id="noOfRowsOfMatrix2TextField" alignment="CENTER" layoutX="376.0" layoutY="35.0" prefHeight="25.0" prefWidth="202.0" promptText="How many rows for Matrix-2?" style="-fx-background-color: #6499E9;" />
      <TextField fx:id="noOfColsOfMatrix2TextField" alignment="CENTER" layoutX="376.0" layoutY="69.0" prefHeight="25.0" prefWidth="202.0" promptText="How many cols for Matrix-2?" style="-fx-background-color: #6499E9;" />
      <Button layoutX="30.0" layoutY="278.0" mnemonicParsing="false" onAction="#executeOperationAndShowButtonOnClicked" prefHeight="25.0" prefWidth="213.0" text="Execute Operation &amp; Show" />
      <TextField fx:id="matrix1ElementTextField" layoutX="144.0" layoutY="109.0" prefHeight="25.0" prefWidth="74.0" style="-fx-background-color: #9EDDFF;" />
      <Label fx:id="elementIndexLabel" layoutX="35.0" layoutY="111.0" prefHeight="20.0" prefWidth="91.0" text="Enter[0][0]:">
         <font>
            <Font size="14.0" />
         </font>
      </Label>
      <Button layoutX="34.0" layoutY="140.0" mnemonicParsing="false" onAction="#addElementToMatrix1ButtonOnClicked" prefHeight="25.0" prefWidth="184.0" style="-fx-background-color: #BEADFA;" text="Add Element to Matrix-1">
         <opaqueInsets>
            <Insets />
         </opaqueInsets></Button>
      <TextField fx:id="matrix2UpperBoundTextField" layoutX="376.0" layoutY="111.0" prefHeight="25.0" prefWidth="202.0" promptText="Upper bound of Martix-2 elements?" style="-fx-background-color: #6499E9;" />
      <Button layoutX="376.0" layoutY="145.0" mnemonicParsing="false" onAction="#generateMatrix2ButtonOnClicked" prefHeight="25.0" prefWidth="202.0" style="-fx-background-color: #6528F7;" text="Generate Matrix-2" textFill="WHITE" />
      <Line endX="476.0" layoutX="115.0" layoutY="184.0" startX="-100.0" stroke="#2d31fa" />
      <Label fx:id="outputLabel" alignment="CENTER" layoutX="30.0" layoutY="319.0" prefHeight="368.0" prefWidth="547.0" style="-fx-background-color: white;" textAlignment="CENTER">
         <font>
            <Font size="15.0" />
         </font></Label>
      <Button layoutX="428.0" layoutY="278.0" mnemonicParsing="false" onAction="#resetMatricesButtonOnClicked" prefHeight="25.0" prefWidth="148.0" text="Reset Matrices" />
      <ComboBox fx:id="operationComboBox" layoutX="30.0" layoutY="195.0" onAction="#operationComboBoxOnItemSelected" prefHeight="25.0" prefWidth="213.0" promptText="Select an Operation" style="-fx-background-color: #6499E9;" />
      <RadioButton fx:id="matrix1RadioButton" layoutX="507.0" layoutY="199.0" mnemonicParsing="false" style="-fx-background-color: #279EFF;" text="Matrix-1" />
      <RadioButton fx:id="matrix2RadioButton" layoutX="507.0" layoutY="230.0" mnemonicParsing="false" style="-fx-background-color: #279EFF;" text="Matrix-2" />
      <Label layoutX="270.0" layoutY="198.0" style="-fx-background-color: #279EFF;" text="Select a Matrix for unary operation:">
         <font>
            <Font size="14.0" />
         </font>
      </Label>
      <Line endX="476.0" layoutX="114.0" layoutY="262.0" startX="-100.0" stroke="#2d31fa" />
   </children>
</AnchorPane>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Matrix.java
---------------------------------------------------------------
package mainpkg;

import java.util.Random;

public class Matrix {
    int[][] vals;
    public Matrix(){
        vals = null;
    }
    public Matrix(int r, int c){
        vals = new int[r][c];
        int i,j;
        for(i=0;i<vals.length;i++){
            for(j=0;j<vals[i].length;j++){
                vals[i][j]=0;
            }
        }
    } 
    public Matrix(int r, int c, int upper){
        vals = new int[r][c];
        Random rand = new Random();
        int i,j;
        for(i=0;i<vals.length;i++){
            for(j=0;j<vals[i].length;j++){
                vals[i][j] = rand.nextInt(upper);
            }
        }
    } 
    public String getStringEquivalentOfMatrix(){
        String str="";
        int i,j;
        for(i=0;i<vals.length;i++){
            for(j=0;j<vals[i].length;j++){
                str += vals[i][j]+" ";
            }
            str += "\n";
        }        
        return str;
    }

    public int[][] getVals() {
        return vals;
    }

    public void setVals(int[][] vals) {
        this.vals = vals;
    }

    @Override
    public String toString() {
        String str="";
        int i,j;
        for(i=0;i<vals.length;i++){
            for(j=0;j<vals[i].length;j++){
                str += vals[i][j]+" ";
            }
            str += "\n";
        }        
        return str;
    }
    
    public Matrix addMatrices(Matrix m){
        Matrix temp = null;
        if(this.vals.length == m.vals.length
                &&
           this.vals[0].length == m.vals[0].length
        ){
            temp = new Matrix(this.vals.length, this.vals[0].length );
            int i,j;
            for(i=0;i<this.vals.length;i++){
                for(j=0;j<m.vals[i].length;j++){
                    temp.vals[i][j] = this.vals[i][j] + m.vals[i][j];
                }
            }
            
        }
        return temp;
    }
    
    public Matrix subtractMatrices(Matrix m){
        Matrix temp = null;
        if(this.vals.length == m.vals.length
                &&
           this.vals[0].length == m.vals[0].length
        ){
            temp = new Matrix(this.vals.length, this.vals[0].length );
            int i,j;
            for(i=0;i<this.vals.length;i++){
                for(j=0;j<m.vals[i].length;j++){
                    temp.vals[i][j] = this.vals[i][j] - m.vals[i][j];
                }
            }
            
        }
        return temp;
    }
    
}
--------------------------------------------------------------------------------------------------------
